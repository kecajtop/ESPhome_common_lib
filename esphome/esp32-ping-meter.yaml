substitutions:
  devicename: esp32-ping-meter
  upper_devicename: ESP32_Ping_meter
  friendly_name: ESP32_Ping_meter
  device_icon: mdi:chip
  key: !secret key_esp32-ping-meter 
  ota: !secret ota_esp32-ping-meter 
  IP: !secret IP_esp32-ping-meter 
  fallback_pass: !secret fallback_pass_esp32-ping-meter 
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  wifi_ssid_ha: !secret wifi_ssid_ha
  wifi_password_ha: !secret wifi_password_ha
  timezone_ha: !secret timezone_ha
  log_level: INFO

packages:
  wifi: !include common/wifi.yaml
  device_base: !include common/device_base.yaml
  generic: !include common/generic.yaml
  esp32_only: !include common/esp32_only.yaml

esphome:
  name: $devicename

esp32:
  board: esp32dev
  framework:
    type: arduino

sensor:
  - platform: homeassistant
    name: "Wan Ping"
    entity_id: sensor.wan_ping
    id: wan_ping

globals:
  - id: flag
    type: int
    restore_value: no
    initial_value: '1'
  - id: sun_is_down
    type: bool
    restore_value: false
    initial_value: 'true'

output:
  - platform: ledc 
    pin: GPIO13
    id: voltmeter #seconds
    frequency: 5000Hz
    min_power: 0.00
    max_power: 0.90

#sensor.wan_ping

select:
  - platform: template
    name: ${friendly_name} Calibration function
    id: select_1
    optimistic: true
    options:
      - ZERO
      - FULL
      - RUN
    initial_option: RUN
    set_action:
      - logger.log:
          format: "Chosen option: %s"
          args: ["x.c_str()"]
      - lambda: |-
          id(select_1).state = x.c_str();
    on_value:
      then:
      - lambda: |-
          if ( x == "ZERO")
          {
            flag = 0;
            id(voltmeter).set_level(0);
            //id(minutes).set_level(0);
            //id(hours).set_level(0);
            //id(am_pm).set_level(0);
          }
          else if ( x == "FULL")
          {
            flag = 0;
            id(voltmeter).set_level(1);
            //id(minutes).set_level(1);
            //id(hours).set_level(1);
            //id(am_pm).set_level(1);

          }
          else if ( x == "RUN")
          {
            id(flag) = 1;
          }
          //if (id(sun_is_down)) 
          // {
            // id(backlight).turn_on().set_brightness(0.7).perform();
            // ESP_LOGD("lambda", "The sun is now down, light will turn on");

          //}
          //else
          //{
            //id(backlight).turn_on().set_brightness(1.0).perform();
            //ESP_LOGD("lambda", "The sun is now up, light will not turn on");
          //}

interval:
  - interval: 1s
    then:
      - lambda: |-
          if (id(wifi_id).is_connected()) 
          {
            //connected to WIFI
            if (flag)
            {
              if (id(HA_status).state)
              {
                //connected to HA
                id(voltmeter).set_level(id(wan_ping).state/500.0);
              //id(minutes).set_level(id(homeassistant_time).now().minute/60.0);
              //auto hour = id(homeassistant_time).now().hour;
              //if (hour > 12)
              //{
              //  id(hours).set_level((hour - 12) /12.0);
              //  id(am_pm).set_level(0.75);
              //}
              //else
              //{
              //  id(hours).set_level(hour /12.0);
              //  id(am_pm).set_level(0.25);
              //}
              }
              else
              {
                //not connected to HA
                id(voltmeter).set_level(0.8);
              }
            }
          }
          else
          {
            //not connected to WIFI
            id(voltmeter).set_level(0.6);
          }