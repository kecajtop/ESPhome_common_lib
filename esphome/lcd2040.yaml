substitutions:
  devicename: lcd2040
  upper_devicename: lcd2040
  friendly_name: lcd2040
  key: !secret key_lcd2040 
  ota: !secret ota_lcd2040 
  IP: !secret IP_lcd2040 
  fallback_pass: !secret fallback_pass_lcd2040
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  wifi_ssid_ha: !secret wifi_ssid_ha
  wifi_password_ha: !secret wifi_password_ha
  log_level: DEBUG

packages:
  wifi: !include common/wifi.yaml
  device_base: !include common/device_base.yaml
  generic: !include common/generic.yaml
  esp32_only: !include common/esp32_only.yaml

esphome:
  name: $devicename

external_components:
  - source: github://epiclabs-io/esphome-modbus-server@master
    refresh: 60s
    components:
      - modbus_server

# Enable logging
logger:
  #baud_rate: 0
  level: DEBUG

sun:
  latitude: !secret lat
  longitude: !secret long

esp32:
  board: esp32dev
  framework:
    type: arduino

i2c:
  sda: GPIO21
  scl: GPIO22

rc522_i2c:
  # ...
  address: 0x28
  on_tag:
    then:
      - homeassistant.tag_scanned: !lambda 'return x;'

display:
  - platform: lcd_pcf8574
    dimensions: 20x04
    address: 0x27
    id: lcd_disp
    user_characters:
    - position: 0
      data:
          - 0b00000
          - 0b01010
          - 0b00000
          - 0b00100
          - 0b00100
          - 0b10001
          - 0b01110
          - 0b00000
    - position: 1
      data:
          - 0b00000
          - 0b01010
          - 0b00000
          - 0b00100
          - 0b00100
          - 0b00000
          - 0b01110
          - 0b10001
    #pages:
    #  - id: page1
    lambda: |-
          if (!id(wifi_id).is_connected()) 
          {
            it.print(0,1,"   Waiting for WIFI   ");
          }
          else
          {
            if (!id(HA_status).state)
            {
              it.print(0,1,"    Waiting for HA   ");
            }
            else
            {
                if (id(dtsu_moc_chwilowa_calkowita).state != NAN)
                {
                switch (id(page)){
                case 1:
                  it.printf(0,0,"L1 %.0fV %.1fA", 
                      id(dtsu_napiecie_l1).state, 
                      abs(id(dtsu_prad_l1).state));
                  it.printf(17,0, "%s",
                      id(mr_ro_1_out1).state ? "ON " : "OFF");
                  it.printf(0,1,"L2 %.0fV %.1fA", 
                      id(dtsu_napiecie_l2).state, 
                      abs(id(dtsu_prad_l2).state));
                  it.printf(17,1, "%s",
                      id(mr_ro_1_out2).state ? "ON " : "OFF");
                  it.printf(0,2,"L3 %.0fV %.1fA", 
                      id(dtsu_napiecie_l3).state, 
                      abs(id(dtsu_prad_l3).state));
                  it.printf(17,2, "%s",
                      id(mr_ro_1_out3).state ? "ON " : "OFF");
                  it.printf(0,3,"%.0fW %.0f/%.0fC", 
                      id(dtsu_moc_chwilowa_calkowita).state, 
                      id(dtsu_temperatura_wody).state, 
                      id(target_temp).state);
                  //it.printf(17,3, "%s", 
                      //id(heat_demand_hot_water_f).state);
                  //it.printf(0,3,"%.0fkWh %s%s%s%s",
                  //  id(dtsu_energia_oddana_do_sieci_kwh).state, 
                  //  id(mr_ro_1_out1).state ? "1" : "0",
                  //  id(mr_ro_1_out2).state ? "1" : "0",
                  //  id(mr_ro_1_out3).state ? "1" : "0",
                  //  id(heat_demand_hot_water).state ? "1" : "0"
                  //  );
                  break;
                case 2:
                    it.printf(0,0,"L1 %.1fV %.2fA", 
                      id(dtsu_napiecie_l1).state, 
                      abs(id(dtsu_prad_l1).state));
                    break;
                  case 3:
                    it.printf(0,0,"L2 %.1fV %.2fA", 
                      id(dtsu_napiecie_l2).state, 
                      abs(id(dtsu_prad_l2).state));
                    break;
                  case 4:
                    it.printf(0,0,"L3 %.1fV %.2fA", 
                      id(dtsu_napiecie_l3).state, 
                      abs(id(dtsu_prad_l3).state));
                    break;
                  case 5:
                    it.print(0, 1, "        OTA");
                    it.print(0, 2, "   Prosze czekac");
                    break;
                  case 18:
                    it.print(0, 1, "        OTA");
                    it.print(0, 2, "     Nieudany");
                    break;
                  case 19:
                    it.print(0, 1, "        OTA");
                    it.print(0, 2, "          6");
                    break;
                  case 20:
                    it.print(0, 1, "        OTA");
                    it.print(0, 2, "     7");

                  default:
                    break;
                  }
                }
                else
                {
                  it.print(0,0,"Waiting for Data");
                }
            } 
          }

# (Optional) For displaying time:
#time:
#- platform: homeassistant
#  id: my_time

# Example configuration entry
binary_sensor:
  - platform: homeassistant
    name: "test Sensor From Home Assistant"
    entity_id: binary_sensor.button_01
    id: my_test_sensor
  - platform: homeassistant
    name: "mr_ro_1_out1"
    entity_id: switch.mr_ro_1_out1
    id: mr_ro_1_out1
  - platform: homeassistant
    name: "mr_ro_1_out2"
    entity_id: switch.mr_ro_1_out2
    id: mr_ro_1_out2
  - platform: homeassistant
    name: "mr_ro_1_out3"
    entity_id: switch.mr_ro_1_out3
    id: mr_ro_1_out3
  - platform: homeassistant
    name: "heat_demand_hot_water"
    entity_id: input_boolean.heat_demand_hot_water
    id: heat_demand_hot_water
  - platform: template
    id: backlight
    filters:
      - delayed_off: 90s
    on_press:
      then:
        - lambda: |-
            id(lcd_disp).backlight();
    on_release:
      then:
        - lambda: |-
            id(lcd_disp).no_backlight();

sensor:
  - platform: homeassistant
    name: "moc_chwilowa_calkowita"
    entity_id: sensor.dtsu_moc_chwilowa_calkowita
    id: dtsu_moc_chwilowa_calkowita
  - platform: homeassistant
    name: "energia_oddana_do_sieci_kwh"
    entity_id: sensor.dtsu_energia_oddana_do_sieci_kwh
    id: dtsu_energia_oddana_do_sieci_kwh
  - platform: homeassistant
    name: "temperatura_wody"
    entity_id: sensor.dtsu_temperatura_wody
    id: dtsu_temperatura_wody
  - platform: homeassistant
    name: "dtsu_napiecie_l1"
    entity_id: sensor.dtsu_napiecie_l1
    id: dtsu_napiecie_l1
  - platform: homeassistant
    name: "dtsu_napiecie_l2"
    entity_id: sensor.dtsu_napiecie_l2
    id: dtsu_napiecie_l2
  - platform: homeassistant
    name: "dtsu_napiecie_l3"
    entity_id: sensor.dtsu_napiecie_l3
    id: dtsu_napiecie_l3


  - platform: homeassistant
    name: "dtsu_prad_l1"
    entity_id: sensor.dtsu_prad_l1
    id: dtsu_prad_l1
  - platform: homeassistant
    name: "dtsu_prad_l2"
    entity_id: sensor.dtsu_prad_l2
    id: dtsu_prad_l2
  - platform: homeassistant
    name: "dtsu_prad_l3"
    entity_id: sensor.dtsu_prad_l3
    id: dtsu_prad_l3

  - platform: homeassistant
    id: target_temp
    entity_id: climate.dtsu_temperature
    attribute: temperature

  - platform: homeassistant
    name: "heat_demand_hot_water"
    entity_id: input_boolean.heat_demand_hot_water
    id: heat_demand_hot_water_f

globals:
- id: page
  type: int
  initial_value: "1"
      
interval:
- interval: 5s
  then:
    - lambda: |-
        id(page) = (id(page) + 1);
        if (id(page) > 4) {
          id(page) = 1;
        }